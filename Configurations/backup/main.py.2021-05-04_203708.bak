import sys 
import os
import datetime
import scdegiskQueries
import extractFromTheFile
import configParms
import getConnection

curs = getConnection.getDb2Connection('cy59857', 'o6o6o6o6')


def main():
    # createCommonMembersFile()
    #
    # extractUsingInputFiles("common")
    # extractUsingInputFiles("isbank")
    #
    # fark = 1
    # print("callingsOfFramework started!")
    # while fark > 0:
    #     commCntBefore = countOfCommonMembers()
    #     processFile('isbank_cobol_framework.txt', "frmCalls")
    #     commCntAfter = countOfCommonMembers()
    #     fark = commCntBefore - commCntAfter
    #     print("Before: " + str(commCntBefore) + "; After:" + str(commCntAfter))
    #
    # print("copiesOfFramework started!")
    # commCntBefore = countOfCommonMembers()
    # processFile('isbank_cobol_framework.txt', "frmCopies")
    # commCntAfter = countOfCommonMembers()
    # print("Before: " + str(commCntBefore) + "; After:" + str(commCntAfter))
    #
    # extractUsingInputFiles("members")
    # extractFromTheFile.formulatedBatchMembers(configParms.commonMembersPath, configParms.entmainb_file)
    # extractUsingInputFiles("interfaces")

    # fark = 1
    # print("callingsOfBatches started!")
    # while fark > 0:
    #     commCntBefore = countOfCommonMembers()
    #     depnsOfMembers("batches", "depnCalls")
    #     commCntAfter = countOfCommonMembers()
    #     fark = commCntBefore - commCntAfter
    #     print("Before: " + str(commCntBefore) + "; After:" + str(commCntAfter))
    #
    # fark = 1
    # print("callingsOfMembers started!")
    # while fark > 0:
    #     commCntBefore = countOfCommonMembers()
    #     depnsOfMembers("members", "depnCalls")
    #     commCntAfter = countOfCommonMembers()
    #     fark = commCntBefore - commCntAfter
    #     print("Before: " + str(commCntBefore) + "; After:" + str(commCntAfter))

    fark = 1
    print("callingsOfInterfaces started!")
    while fark > 0:
        commCntBefore = countOfCommonMembers()
        depnsOfMembers("interfaces", "depnCalls")
        commCntAfter = countOfCommonMembers()
        fark = commCntBefore - commCntAfter
        print("Before: " + str(commCntBefore) + "; After:" + str(commCntAfter))

    extractFromTheFile.formulatedMembers(configParms.commonMembersPath, 'COBOL')
    fark = 1
    print("callingsOfInterfaces started again!")
    while fark > 0:
        commCntBefore = countOfCommonMembers()
        depnsOfMembers("interfaces", "depnCalls")
        commCntAfter = countOfCommonMembers()
        fark = commCntBefore - commCntAfter
        print("Before: " + str(commCntBefore) + "; After:" + str(commCntAfter))

    print("copiesOfMembers started!")
    depnsOfMembers("members", "depnCopies")


    print("copiesOfInterfaces-2 started!")
    depnsOfMembers("interfaces", "depnCopies2")

    extractFromTheFile.formulatedMembers(configParms.commonMembersPath, 'COPY')



    extractUsingInputFiles("other")

    afterCobolRepositoriesLoaded()


def afterCobolRepositoriesLoaded():
    commonCopies = [line.rstrip('\n').rstrip(' ') for line in open(configParms.commonMembersPath)]
    for cpy in commonCopies:
        if len(cpy) > 4: 
            cpyName = cpy.split(';')[0].rstrip()
            typ = 'repoOfCopy'
            repoName = scdegiskQueries.repositoryOfCopy(cpyName, configParms.sqlPaths.get(typ), curs)
            if(bool(repoName)):
                destinationFullPath = configParms.metadataDir + convertRepoName2File(repoName)
                print(cpyName + ',' + destinationFullPath)
                extractFromTheFile.extractMemberFromCommonMembers(configParms.commonMembersPath, cpyName, destinationFullPath)
    
    commonCopies = [line.rstrip('\n').rstrip(' ') for line in open(configParms.commonMembersPath)]
    for cpy in commonCopies:
        if len(cpy) > 4: 
            cpyName = cpy.split(';')[0].rstrip()
            if(cpyName[0:6] == 'TRXINP' or cpyName[0:6] == 'TRXOUT'):
                typ = 'repoOfTrx'
                repoName = scdegiskQueries.repositoryOfCopy(str('TXN' + cpyName[3:8] ), configParms.sqlPaths.get(typ), curs) 
                if(bool(repoName)):
                    destinationFullPath = configParms.metadataDir + convertRepoName2File(repoName)
                    print(cpyName + ',' + destinationFullPath)
                    extractFromTheFile.extractMemberFromCommonMembers(configParms.commonMembersPath, cpyName, destinationFullPath)     
                  
def convertRepoName2File(repo):
    filePrefix = ''
    repoSuffix = ''
    if(repo.find('-api') != -1 ):
        repoSuffix = repo.replace('-api','')
        # filePrefix = 'interfaces_of_'
    elif(repo.find('-app') != -1 ):            
        repoSuffix = repo.replace('-app', '')
        # filePrefix = 'members_of_'
    
    for fileName in os.listdir(configParms.metadataDir):  
        if(fileName.find(repoSuffix) != -1 and len(repoSuffix) > 1):
            # print(fileName) 
            # print(repoSuffix)
            # print(repo)
            fileIndex = fileName.split('_')[2]
            break
    
    if repo.find('isbank-cobol-framework') != -1:
        fileName = 'isbank_cobol_framework.txt'
    else:
        fileName = 'interfaces_of_' + fileIndex + '_' + repoSuffix + '.txt'    
    
    return fileName
    
#metadata klasoru icinde initial file i yaratir. extractionlar bunun uzerinden
#yapilacak.
def createCommonMembersFile():  
    onlFile = open(configParms.allOnlineMembersPath, "r")
    onlMemberList = list(dict.fromkeys(onlFile.read().split('\n')))
    commonMembersDict = dict.fromkeys(onlMemberList)
    commonMembersList = list(commonMembersDict)
    commonsFile = open(configParms.commonMembersPath, "a+")
    for member in commonMembersList:
        commonsFile.write(member.rstrip() + '\n')
    commonsFile.close()


def processFile(fileName, typ):
    filesFullPath = configParms.metadataDir + fileName
    result = scdegiskQueries.callingsOfMembers(filesFullPath, configParms.sqlPaths.get(typ), curs)
    callingsOutputFilePath = configParms.outputDir + "result_of_" + typ + "_" + fileName
    callingsFile = open(callingsOutputFilePath, "w")
    for member in result: 
        memberStr = str(member[0]) + ";" + str(member[1]) + ";" + str(member[2]).rstrip()
        callingsFile.write(memberStr + "\n")
    callingsFile.close()    
    extractFromTheFile.extractFromCommonMembers(configParms.commonMembersPath, callingsOutputFilePath, filesFullPath)

# kendisine gelen type taki dosyalari input klasorunde bulur. common_, isbank_, members_,
# interfaces_ type lar olabilir. Inputta buldugu dosyayi metadata/common_members'tan extract eder ve
# ayni isimle metadata/filename e yazar. common_members i input dosyalarini kullanarak azaltir.
def extractUsingInputFiles(typ):   
    for file in os.listdir(configParms.inputDir):
        filename = os.fsdecode(file)
        if(filename.split("_")[0] == typ): 
            inputFullPath = configParms.inputDir + filename
            destinationFullPath = configParms.metadataDir + filename
            extractFromTheFile.extractFromCommonMembers(configParms.commonMembersPath, inputFullPath, destinationFullPath)            
            
def depnsOfMembers(fileType, sqlType):            
    for file in os.listdir(configParms.metadataDir):
        filename = os.fsdecode(file)
        if filename.split('_')[0] == fileType:
            file_index = int(filename.split('_')[2]) 
            if(file_index >= configParms.restarts.get(fileType).get(sqlType)):
                print(str(file_index) + ":" + sqlType + ":" + filename)
                processFile(filename, sqlType)
     
def countOfCommonMembers():
    mbrFile = open(configParms.commonMembersPath, "r")
    memberList = mbrFile.read().split('\n')
    mbrFile.close()
    return len(memberList)
# ---------------------------------------------------------------------

if __name__ == '__main__': 
    main()

